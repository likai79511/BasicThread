线程常用的操作

[Thread]
sleep： 线程休眠。 有多种重载，带time和不带time的。不会释放锁。可响应中断。
join：  等待其他线程执行完毕。 当前线程等子线程。  join内部采用wait的方式来暂停当前线程去等待（而它的wait是如何唤醒的呢？ 线程执行完毕后回自动notifyAll,所以是被等待的线程执行完后唤醒的）。
yield:  放弃以获取到的CPU资源。
currentThread:  获取当前执行线程的引用。
interrupt：  中断线程。

[Object]
wait:  线程休眠。会释放锁。可响应中断。
notify: 线程唤醒。 notify之后 wait的线程不会立刻获得锁向下执行，而是notify执行的当前线程 释放掉锁（执行完毕、中断以及调用了释放锁的方法）之后 wait的线程才能继续。


为什么wait、notify 需要放在 synchronized中呢？
为了保证原子化，防止wait前后的线程切换引发的死锁和永久等待的问题。
而sleep是针对单线程了，不需要配合，所以可以不需要被原子化。


为什么wait、notify 定义在Object中，而不是定义在Thread中?
因为 wait、notify都是锁的操作，而锁是一个对象。  一个线程可能持有多个锁，如果把锁的操作放在Thread中就很难实现。
因为Thread也是一个Object,也存在wait方法，但不要直接使用， 因为Thread结束后会自动notify。


Synchronized
作用：保证并发安全。 被该关键词修饰的方法，同一时刻只能有一个线程执行该代码。
原理：利用锁。 当A和B两个线程同时访问被synchronized修饰的方法时，第一个执行者会独占这把锁，另一个线程只能处于Blocked状态，当第一个执行者执行完毕后
释放了锁，另一个Blocked状态的线程才能开始执行，状态变为Runnable状态。

线程分类： 用户线程 和 守护线程。
用户线程 会影响JVM退出，而守护线程 则不会。  守护线程 用来 守护 用户线程。