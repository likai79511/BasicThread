Java内存模型

Java代码到CPU指令：
*.java文件 -> 用javac命令 生成 *.class文件（字节码，平台无关） -> JVM将*.class转换成 机器指令 -> 机器指令可以在CPU上运行
不同的JVM实现会带来不同的翻译，不同的CPU平台的机器指令又千差万别；所以在我们java代码层写的各种lock，其实最后依赖的是JVM的
具体实现(不同版本可能实现不同) 和 CPU指令，才能帮我们达到线程安全的效果。
由于最终效果依赖处理器，不同处理器结果不一样，这样无法保证并发安全，所以需要一个标准，让多线程运行的结果可预期，这个标准就是JMM。

JVM内存结构：和 Java虚拟机的运行时区域 有关。
包括： 方法区、堆、Java栈、本地方法栈、程序计数器。 其中： 方法区、堆 是所有线程共享的，而 堆、栈、程序计数器 是线程私有的。
--堆：整个运行区域中最大的一块。 存放实例对象： new、数组啊等。 大小动态分配。
--虚拟机栈：存放基本数据类型， 和对象的引用。（对象实例保存在 堆中，而引用保存在栈），在编译时就能确定大小。
--方法区：存放 已加载的 静态变量、常量信息，包含永久引用。
--本地方法栈：保存 本地方法相关，比如 native 方法。
--程序计数器： 保存当前线程执行的代码行号数（当线程切换的时候保存和恢复）、循环、指令处理等。


Java对象模型：和 Java对象在虚拟机中的表现形式有关。是 Java对象自身的存储模型。
--JVM会给这个类创建一个 InstanceKlass,保存在方法区，用来在JVM层表示JAVA类。
--我们在Java代码中，使用new创建一个对象的时候，JVM会创建一个instanceOopDesc对象，这个对象包含了对象头和实例数据。



Java内存模型(JMM: Java Memory Model)：和 Java的并发变成有关。
是一个标准，为了在不同的处理器上 让多线程运行的结果可预期。
重排序、可见性、原子性。

--重排序： 提高处理速度。
会产生重排序的情况：
1.编译器优化： JVM，JIT编译器等。
2.CPU指令重排。

--可见性：多级缓存引起。
CPU有多级缓存，导致读的数据过期。
    -- 高度缓存的容量比主内存小，但是速度仅次于寄存器，所以CPU和主内存之间就多了Cache层.
    -- 线程间的对于共享变量的可见性问题不是直接由多核引起的，而是多级缓存引起的。
    -- 如果多有个核心都只用一个缓存，那么就不存在可见性问题。
    -- 每个核心都会将自己需要的数据读到独占缓存中，数据修改后也是写入到缓存中，然后等待刷入主内存中。所以会导致有些核心读取到的值是一个过期值。

JMM有一下规定：
1. 所有的变量都存储在主内存中，同时每个线程也有自己独立的工作内存，工作内存中的变量内容是主内存中的拷贝。
2. 线程不能直接读写主内存的变量，而是只能操作自己工作内存中的变量，然后再同步到主内存中去。
3. 主内存是多个线程共享的，但是线程间不共享工作内存，如果需要通信，必须借助主内存中转来完成。

所有的共享变量存在主内存中，每个线程都有自己的本地内存，而且线程读写共享数据也是通过本地内存交换的，所以才导致了可见性的问题。

happens-before:
-- happens-before规则是用来解决可见性问题的：在时间上，动作A发生在动作B之前，B保证能看到A。
-- 两个操作可以用happens-before来确定他们的执行顺序：如果一个操作happens-before于另一个操作，那么我们说第一个操作对于第二个操作是可见的。

happens-before的规则：
1. 单线程操作
2. 锁操作(synchronized 和 lock)
3. volatile变量
4. 线程启动
5. 线程join
6. 传递性
7. 中断
8. 构造方法
9. 工具类的Happens-Before原则
    -- 线程安全的容器get一定能看到在此之前的put等存入动作
    -- CountDownLatch
    -- Semaphore
    -- Future
    -- 线程池
    -- CyclicBarrier
