异常

主线程无法捕获子线程的异常： try-catch 只能捕获当前线程的异常。可以使用Thread.setDefaultUncaughtExceptionHandler去全局处理。

为什么异常能传递到Thread.setDefaultUncaughtExceptionHandler中呢？
因为ThreadGroup的异常处理机制中， 有DefaultUncaughtExceptionHandler的判断，如果有设置，就会调用到。

全局异常处理器可加的场景：
1.给程序统一设置
2.给每个线程单独设置
3.给线程池设置


线程安全： 如果多线程访问同一个变量，我们不用考虑线程间交替和调度，也不需要额外的管控，还能获取到正确的结果，那么就是线程安全的。
比如 原子化的操作 是线程安全的。而通常我们会使用锁、synchronized等额外操作去管理线程，说明这块逻辑是线程不安全的。

线程不安全： 非原子化操作， 共享数据的读写等。

多线程带来的性能问题：
调度：上下文切换。  当线程数量 超多 CPU核心数的时候，操作系统就会调度。
上下文： 保存线程状态。（执行到哪了，什么状态等， 因为后面还要切回来）
缓存开销：线程切换后，对应的缓存就失效了。
会导致密集的上下文切换： 抢锁、IO

协作：内存同步。 为了数据正确性，禁止编译器优化。










